// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Proje.Model.Context;

namespace Proje.Model.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Proje.Model.Entities.AddressType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("AddressType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6278fe0e-4e04-4dbe-b2d8-d6d2df22694d"),
                            Status = 1,
                            TypeName = "Ev Adresi"
                        },
                        new
                        {
                            Id = new Guid("ef7428eb-9c56-49ce-907c-209ea650ac38"),
                            Status = 1,
                            TypeName = "İş Adresi"
                        });
                });

            modelBuilder.Entity("Proje.Model.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d67d426-77d0-4359-9c8b-804c0d7890ff"),
                            BrandName = "Altın Yıldız",
                            Description = "Klasik Giyim",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("3acb9af2-4983-45c8-9081-f6233a77f537"),
                            BrandName = "Pierre Cardin",
                            Description = "Klasik Giyim",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("5819fd74-7ad3-4ac0-89e1-48f7a06e87e5"),
                            BrandName = "Kiğılı",
                            Description = "Klasik Giyim",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("2656565c-b55c-4996-8216-9ab2daa41792"),
                            BrandName = "Puma",
                            Description = "Spor Giyim",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("d9913b9a-6d9f-4ecc-8562-e3fd687b7485"),
                            BrandName = "Adidas",
                            Description = "Spor Giyim",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("91c05f73-4a1b-4256-84a0-3d6fe6ee46d3"),
                            BrandName = "Nike",
                            Description = "Spor Giyim",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("ecb44058-2977-47b0-b143-abadddaa2e77"),
                            BrandName = "Polo",
                            Description = "Spor Giyim",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("781a5242-96f5-463b-823e-ec601fdcd591"),
                            BrandName = "Koton",
                            Description = "Günlük Giyim",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("70291557-c137-4c6f-bd73-874ccc8d2994"),
                            BrandName = "Mavi",
                            Description = "Spor Giyim",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Proje.Model.Entities.BrandToCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("BrandToCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("42ebec42-cdb6-4119-b9bb-bd4d31ed0645"),
                            BrandId = new Guid("1d67d426-77d0-4359-9c8b-804c0d7890ff"),
                            BrandName = "Altın Yıldız",
                            CategoryId = new Guid("6e5250ef-ca5a-4c6c-9c24-03bd5f16e854"),
                            CategoryName = "Takım Elbise",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("3108c411-5107-4c40-8cbc-2dad9b57890f"),
                            BrandId = new Guid("3acb9af2-4983-45c8-9081-f6233a77f537"),
                            BrandName = "Pierre Cardin",
                            CategoryId = new Guid("6e5250ef-ca5a-4c6c-9c24-03bd5f16e854"),
                            CategoryName = "Takım Elbise",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("00209cdb-6436-41e2-b6aa-927415501ad2"),
                            BrandId = new Guid("5819fd74-7ad3-4ac0-89e1-48f7a06e87e5"),
                            BrandName = "Kiğılı",
                            CategoryId = new Guid("6e5250ef-ca5a-4c6c-9c24-03bd5f16e854"),
                            CategoryName = "Takım Elbise",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("8ad8b0fa-f7fa-4fdc-9869-d800d433ec47"),
                            BrandId = new Guid("2656565c-b55c-4996-8216-9ab2daa41792"),
                            BrandName = "Puma",
                            CategoryId = new Guid("6d66bd90-dabf-46a9-b75b-f206fbe5c7d9"),
                            CategoryName = "Spor Ayakkabı",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("92a2f3e9-19ac-4541-a9d9-a2f78544c20d"),
                            BrandId = new Guid("d9913b9a-6d9f-4ecc-8562-e3fd687b7485"),
                            BrandName = "Adidas",
                            CategoryId = new Guid("6d66bd90-dabf-46a9-b75b-f206fbe5c7d9"),
                            CategoryName = "Spor Ayakkabı",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("b4f42fec-188a-429d-a166-2c3ea5b3f379"),
                            BrandId = new Guid("91c05f73-4a1b-4256-84a0-3d6fe6ee46d3"),
                            BrandName = "Nike",
                            CategoryId = new Guid("6d66bd90-dabf-46a9-b75b-f206fbe5c7d9"),
                            CategoryName = "Spor Ayakkabı",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("e8dcb570-00ed-4535-99b2-55262224a077"),
                            BrandId = new Guid("2656565c-b55c-4996-8216-9ab2daa41792"),
                            BrandName = "Puma",
                            CategoryId = new Guid("8678a844-6811-4018-821c-a499d7a7761c"),
                            CategoryName = "Eşofman",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("846927ce-575d-4829-9184-0e5780d01208"),
                            BrandId = new Guid("d9913b9a-6d9f-4ecc-8562-e3fd687b7485"),
                            BrandName = "Adidas",
                            CategoryId = new Guid("8678a844-6811-4018-821c-a499d7a7761c"),
                            CategoryName = "Eşofman",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("d100a69e-4e1b-4e32-9365-58361a163233"),
                            BrandId = new Guid("91c05f73-4a1b-4256-84a0-3d6fe6ee46d3"),
                            BrandName = "Nike",
                            CategoryId = new Guid("8678a844-6811-4018-821c-a499d7a7761c"),
                            CategoryName = "Eşofman",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("fbbc0469-f74c-4c04-93c4-c6b2806bf078"),
                            BrandId = new Guid("781a5242-96f5-463b-823e-ec601fdcd591"),
                            BrandName = "Koton",
                            CategoryId = new Guid("220e9662-88cc-4b24-8c40-80d423553615"),
                            CategoryName = "Kazak",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("315da381-0dd0-4f41-bf86-344633676b19"),
                            BrandId = new Guid("70291557-c137-4c6f-bd73-874ccc8d2994"),
                            BrandName = "Mavi",
                            CategoryId = new Guid("220e9662-88cc-4b24-8c40-80d423553615"),
                            CategoryName = "Kazak",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("64570dd2-b796-44ce-a8d6-fa41ea0ca738"),
                            BrandId = new Guid("70291557-c137-4c6f-bd73-874ccc8d2994"),
                            BrandName = "Mavi",
                            CategoryId = new Guid("ff670e2d-c83c-4def-b5b7-35595a3c26cc"),
                            CategoryName = "Kazak",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("3ca840a1-11a1-47a9-bb29-91723f43f725"),
                            BrandId = new Guid("781a5242-96f5-463b-823e-ec601fdcd591"),
                            BrandName = "Koton",
                            CategoryId = new Guid("ff670e2d-c83c-4def-b5b7-35595a3c26cc"),
                            CategoryName = "Kazak",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("a1c7aeca-378e-4ea6-88c7-7c57eee5c472"),
                            BrandId = new Guid("5819fd74-7ad3-4ac0-89e1-48f7a06e87e5"),
                            BrandName = "Kiğılı",
                            CategoryId = new Guid("ff670e2d-c83c-4def-b5b7-35595a3c26cc"),
                            CategoryName = "Kazak",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("cf31a578-2636-4b08-8870-45ca237150a8"),
                            BrandId = new Guid("70291557-c137-4c6f-bd73-874ccc8d2994"),
                            BrandName = "Mavi",
                            CategoryId = new Guid("74368c62-c748-483e-8b38-9a4302d32922"),
                            CategoryName = "Pantolon",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("e98a356f-8e09-4eb1-adb4-8ad4aa34b429"),
                            BrandId = new Guid("781a5242-96f5-463b-823e-ec601fdcd591"),
                            BrandName = "Koton",
                            CategoryId = new Guid("74368c62-c748-483e-8b38-9a4302d32922"),
                            CategoryName = "Pantolon",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("2f543e58-25c4-4f78-b9c9-3da55714bd90"),
                            BrandId = new Guid("5819fd74-7ad3-4ac0-89e1-48f7a06e87e5"),
                            BrandName = "Kiğılı",
                            CategoryId = new Guid("74368c62-c748-483e-8b38-9a4302d32922"),
                            CategoryName = "Pantolon",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Proje.Model.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("Proje.Model.Entities.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("Proje.Model.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6e5250ef-ca5a-4c6c-9c24-03bd5f16e854"),
                            CategoryName = "Takım Elbise",
                            Description = "Klasik Giyim",
                            ImageUrl = "/",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("6d66bd90-dabf-46a9-b75b-f206fbe5c7d9"),
                            CategoryName = "Spor Ayakkabı",
                            Description = "Spor Giyim",
                            ImageUrl = "/",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("8678a844-6811-4018-821c-a499d7a7761c"),
                            CategoryName = "Eşofman",
                            Description = "Spor Giyim",
                            ImageUrl = "/",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("220e9662-88cc-4b24-8c40-80d423553615"),
                            CategoryName = "Kazak",
                            Description = "Günlük Giyim",
                            ImageUrl = "/",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("ff670e2d-c83c-4def-b5b7-35595a3c26cc"),
                            CategoryName = "Gömlek",
                            Description = "Günlük Giyim",
                            ImageUrl = "/",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("74368c62-c748-483e-8b38-9a4302d32922"),
                            CategoryName = "Pantolon",
                            Description = "Günlük Giyim",
                            ImageUrl = "/",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Proje.Model.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CityCode")
                        .HasColumnType("integer");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1646e31-cae1-41c7-b7fa-5900651c5e69"),
                            CityCode = 34,
                            CityName = "İstanbul",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("ee05e832-798f-4ef3-9e75-cec81a015103"),
                            CityCode = 6,
                            CityName = "Ankara",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Proje.Model.Entities.County", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CityCode")
                        .HasColumnType("integer");

                    b.Property<int>("CountyCode")
                        .HasColumnType("integer");

                    b.Property<string>("CountyName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("County");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd9f5f98-b7ec-4f3c-b256-2b32c1156f3f"),
                            CityCode = 34,
                            CountyCode = 1,
                            CountyName = "Kağıthane",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("09aa8046-8f90-4f92-bdfe-f27fe643fef6"),
                            CityCode = 34,
                            CountyCode = 2,
                            CountyName = "SarıYer",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("da129d37-e7be-4340-987c-46a7c20429e2"),
                            CityCode = 34,
                            CountyCode = 3,
                            CountyName = "Esenler",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("4cf528cc-8f34-4534-9229-c1e0fb7e533f"),
                            CityCode = 34,
                            CountyCode = 4,
                            CountyName = "Beşktaş",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("0191008f-672f-4754-83df-4330bad1eb52"),
                            CityCode = 34,
                            CountyCode = 5,
                            CountyName = "Şişli",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("a65a4934-a7a6-4f62-8f50-01be9b04d74b"),
                            CityCode = 34,
                            CountyCode = 6,
                            CountyName = "Taksim",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("c909881e-4437-407e-bc64-15f350b45b2c"),
                            CityCode = 34,
                            CountyCode = 7,
                            CountyName = "Bakırköy",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("20c3a4d8-42fa-42b9-a591-5cd12d52b94c"),
                            CityCode = 34,
                            CountyCode = 8,
                            CountyName = "Fatih",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("e0ec0e46-1db0-4133-a1cf-6f98e28f6d5d"),
                            CityCode = 34,
                            CountyCode = 9,
                            CountyName = "Kadıköy",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("37073e80-ca18-4f49-b4b6-99eaeb67c9d8"),
                            CityCode = 6,
                            CountyCode = 10,
                            CountyName = "Çankaya",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("4c3e1b47-2216-4e50-a214-c32ae2ee40e9"),
                            CityCode = 6,
                            CountyCode = 11,
                            CountyName = "Sıhhıye",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("7d0137d0-befe-4efa-84f9-1630a0217af3"),
                            CityCode = 6,
                            CountyCode = 12,
                            CountyName = "Yeni Mahalle",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("2aae8f9f-3ea8-45a8-8bb2-10abe0cbfd5f"),
                            CityCode = 6,
                            CountyCode = 13,
                            CountyName = "Demet Evler",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("ae1aebd8-c181-4464-8d96-808f4f47f196"),
                            CityCode = 6,
                            CountyCode = 14,
                            CountyName = "Gölbaşı",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Proje.Model.Entities.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LongName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Currency");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7b4fba26-c678-4b08-a43c-38ccdbe594ee"),
                            LongName = "TÜRK LİRASI",
                            ShortName = "TL",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("acf0f314-3b7d-4d2c-bca7-7b0a195ce8a2"),
                            LongName = "EURO",
                            ShortName = "EUR",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("dc2dc16f-529a-4276-aa00-436bf2ca5b7f"),
                            LongName = "DOLAR",
                            ShortName = "USD",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Proje.Model.Entities.CurrencyValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("BuyingPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("numeric");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("CurrencyValue");
                });

            modelBuilder.Entity("Proje.Model.Entities.DemandReason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("DemandReason");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2b1dab9-d45d-4763-8970-48034a2d5f44"),
                            Reason = "Ürünü İade Etmek İstiyorum",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("21545434-6b7a-4235-b731-2ca45c187a24"),
                            Reason = "Ürünü Değiştirmek İstiyorum",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("9002b034-2862-4024-a2a2-12e287fb2c7c"),
                            Reason = "Faturadaki Ürünler İle Gelen Ürünler Farklı",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("665f138d-3e77-495e-b2c7-3847f91545e2"),
                            Reason = "Siparişimdeki Ürünler İle Gelen Ürünler Farklı",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("bb16690b-9345-4fdb-bd45-f5f965cd3731"),
                            Reason = "Diğer",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Proje.Model.Entities.DemandStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("DemandStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d4a24ea-6cf0-4836-8777-94c8bba7e7da"),
                            Name = "Onay Bekliyor",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("9c6dfb14-2d90-4f14-a0ce-c3b0e4c0f778"),
                            Name = "Onaylandı",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("8a138711-7a9c-46bc-8ff4-b7fe87c86da3"),
                            Name = "İptal Edildi",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Proje.Model.Entities.Distributor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Distributor");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6cfc425a-cea6-4079-b123-5b8116c55ad9"),
                            ContactPerson = "Burak YEŞİL",
                            Email = "altınyıldız@altınyıldız.com",
                            Name = "Altın Yıldız İstanbul Şube",
                            Phone = "0555 555-55-55",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("d32fcf25-4d38-4d99-b1e5-c3cab7606807"),
                            ContactPerson = "Burak KARA",
                            Email = "coton@coton.com",
                            Name = "Coton İstanbul Şube",
                            Phone = "0555 555-55-56",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("8db88a18-19ad-4648-a62a-9ff6c7080311"),
                            ContactPerson = "Burak SARI",
                            Email = "kigili@kigili.com",
                            Name = "Kiğılı İstanbul Şube",
                            Phone = "0555 555-55-57",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("263fa307-8b12-414f-8f7b-c5f359545150"),
                            ContactPerson = "Burak MAVİ",
                            Email = "nike@nike.com",
                            Name = "Nike İstanbul Şube",
                            Phone = "0555 555-55-58",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("1852023f-2032-4954-af86-11fe9a21f609"),
                            ContactPerson = "Burak KIRMIZI",
                            Email = "samsung@samsung.com",
                            Name = "Samsung İstanbul Şube",
                            Phone = "0555 555-55-59",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Proje.Model.Entities.DistributorToProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DistributorId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DistributorId");

                    b.HasIndex("ProductId");

                    b.ToTable("DistributorToProduct");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4e99dc58-b8d1-4f5a-a1a8-914e1364351f"),
                            DistributorId = new Guid("6cfc425a-cea6-4079-b123-5b8116c55ad9"),
                            ProductId = new Guid("1acb9af2-4983-45c8-9081-f6233a77f111"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("3e165d70-e775-485d-ba89-ce7d22f6548c"),
                            DistributorId = new Guid("d32fcf25-4d38-4d99-b1e5-c3cab7606807"),
                            ProductId = new Guid("2acb9af2-4983-45c8-9081-f6233a77f222"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("Proje.Model.Entities.FavouritedProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("FavouritedProduct");
                });

            modelBuilder.Entity("Proje.Model.Entities.InstallmentRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Installment")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PaymentGatewayId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Rate")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PaymentGatewayId");

                    b.ToTable("InstallmentRate");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c86c8cb4-4a3f-478a-9375-6efe790ae864"),
                            Installment = 3,
                            PaymentGatewayId = new Guid("eb183c77-cc12-45e0-9792-57f2318ddf71"),
                            Rate = 0.18m,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("df5846fa-84d6-4d4b-b47e-60b847cc1c3a"),
                            Installment = 6,
                            PaymentGatewayId = new Guid("eb183c77-cc12-45e0-9792-57f2318ddf71"),
                            Rate = 0.20m,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("fadaac3d-a3ae-42cd-94a1-d980917518ba"),
                            Installment = 9,
                            PaymentGatewayId = new Guid("eb183c77-cc12-45e0-9792-57f2318ddf71"),
                            Rate = 0.23m,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("6a23d070-9303-445c-87ad-92624cae21df"),
                            Installment = 12,
                            PaymentGatewayId = new Guid("eb183c77-cc12-45e0-9792-57f2318ddf71"),
                            Rate = 0.25m,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("918d7196-ec1d-4fe0-a8d4-72df98ecf433"),
                            Installment = 15,
                            PaymentGatewayId = new Guid("eb183c77-cc12-45e0-9792-57f2318ddf71"),
                            Rate = 0.30m,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("bcbb2945-7340-4c66-9fe5-54d4da5465fc"),
                            Installment = 3,
                            PaymentGatewayId = new Guid("35af2ff3-8b97-43f3-8176-59982291b012"),
                            Rate = 0.15m,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("415dd76e-8d3d-4ac8-a9bd-c4e24e7ba45f"),
                            Installment = 6,
                            PaymentGatewayId = new Guid("35af2ff3-8b97-43f3-8176-59982291b012"),
                            Rate = 0.18m,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("41effd73-3624-4185-a8eb-a37cd830585c"),
                            Installment = 10,
                            PaymentGatewayId = new Guid("35af2ff3-8b97-43f3-8176-59982291b012"),
                            Rate = 0.22m,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("89d4e81c-7632-4c90-8e12-9b265b9baaee"),
                            Installment = 15,
                            PaymentGatewayId = new Guid("35af2ff3-8b97-43f3-8176-59982291b012"),
                            Rate = 0.32m,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Proje.Model.Entities.MemberAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("AddressTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("CityCode")
                        .HasColumnType("integer");

                    b.Property<int>("CountyCode")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TCLD")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<string>("TaxNumber")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TaxOffice")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UserPhoneNumber")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<string>("UserSurName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("MemberAddress");
                });

            modelBuilder.Entity("Proje.Model.Entities.OptionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Slug")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("OptionGroup");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e8e39b5-8e99-46b4-88cc-b3126367b365"),
                            Slug = "Mevcut Diğer Renkler",
                            SortOrder = 1,
                            Status = 1,
                            Title = "Renk"
                        });
                });

            modelBuilder.Entity("Proje.Model.Entities.OptionToProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OptionGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("OptionGroupId");

                    b.HasIndex("OptionId");

                    b.HasIndex("ProductId");

                    b.ToTable("OptionToProduct");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ef12cea5-7ade-4f57-87f2-dadac3112c0b"),
                            OptionGroupId = new Guid("3e8e39b5-8e99-46b4-88cc-b3126367b365"),
                            OptionId = new Guid("ef12cea5-7ade-4f57-87f2-dadac3112c0b"),
                            ParentProductId = new Guid("8acb9af2-4983-45c8-9081-f6233a77f888"),
                            ProductId = new Guid("3acb9af2-4983-45c8-9081-f6233a77f333"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("50a5f086-42c9-4ef3-9873-7021eebe1017"),
                            OptionGroupId = new Guid("3e8e39b5-8e99-46b4-88cc-b3126367b365"),
                            OptionId = new Guid("d41b5341-0ad0-4e5f-9108-44a669cd7024"),
                            ParentProductId = new Guid("8acb9af2-4983-45c8-9081-f6233a77f888"),
                            ProductId = new Guid("7acb9af2-4983-45c8-9081-f6233a77f777"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("Proje.Model.Entities.Options", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OptionGroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Slug")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("OptionGroupId");

                    b.ToTable("Options");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ef12cea5-7ade-4f57-87f2-dadac3112c0b"),
                            OptionGroupId = new Guid("3e8e39b5-8e99-46b4-88cc-b3126367b365"),
                            Slug = "",
                            SortOrder = 1,
                            Status = 1,
                            Title = "Kırmızı"
                        },
                        new
                        {
                            Id = new Guid("d41b5341-0ad0-4e5f-9108-44a669cd7024"),
                            OptionGroupId = new Guid("3e8e39b5-8e99-46b4-88cc-b3126367b365"),
                            Slug = "",
                            SortOrder = 2,
                            Status = 1,
                            Title = "Beyaz"
                        },
                        new
                        {
                            Id = new Guid("42c7bebc-e7df-4de2-9ce4-9227451a2f5c"),
                            OptionGroupId = new Guid("3e8e39b5-8e99-46b4-88cc-b3126367b365"),
                            Slug = "",
                            SortOrder = 3,
                            Status = 1,
                            Title = "Mavi"
                        },
                        new
                        {
                            Id = new Guid("ac5ea607-20e2-4ced-889c-d229814d55aa"),
                            OptionGroupId = new Guid("3e8e39b5-8e99-46b4-88cc-b3126367b365"),
                            Slug = "",
                            SortOrder = 4,
                            Status = 1,
                            Title = "Yeşil"
                        });
                });

            modelBuilder.Entity("Proje.Model.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("BillingAddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CustomerFirstname")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CustomerPhone")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<string>("CustomerSurname")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("GiftNote")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PaymentGatewayCode")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PaymentGatewayName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PaymentTypeName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ShippingAddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShippingCompanyName")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("ShippingTrackingCode")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("ShippingAddressId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Proje.Model.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<decimal>("ProductWeight")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("Proje.Model.Entities.OrderRefundDemand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<decimal>("Fee")
                        .HasColumnType("numeric");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ResultStatus")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("OrderRefundDemand");
                });

            modelBuilder.Entity("Proje.Model.Entities.OrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("OrderStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e2c06a2-188a-4ec9-948f-955966c1cd6d"),
                            Name = "Onay Bekliyor",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("8f6c05a4-a7ad-4d74-b264-5514baadef13"),
                            Name = "Silindi",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("be10f111-f4f6-4d58-9807-ec8c433d6b22"),
                            Name = "Siparişiniz Hazırlanıyor",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("f00ad7dc-f3fe-4951-bda3-b90a6e29259d"),
                            Name = "İptal Edildi",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("1d8c4aeb-ee04-4f5d-90b7-aee14b783b88"),
                            Name = "İade Edildi",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("719d6e39-aee9-49f9-bfcf-dba7e28c0293"),
                            Name = "Kargoya Verildi",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Proje.Model.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("FinalAmount")
                        .HasColumnType("numeric")
                        .HasMaxLength(255);

                    b.Property<int>("Installment")
                        .HasColumnType("integer");

                    b.Property<decimal>("InstallmentRate")
                        .HasColumnType("numeric");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("PaymentGatewayCode")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PaymentGatewayName")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<Guid?>("PaymentStatusId")
                        .HasColumnType("uuid");

                    b.Property<string>("PaymentTypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("SumOfGainedPoints")
                        .HasColumnType("numeric");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("UserFirstname")
                        .IsRequired()
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("UserNote")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("UserPhone")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UserSurname")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("PaymentStatusId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Proje.Model.Entities.PaymentGateway", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("PaymentGateway");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb183c77-cc12-45e0-9792-57f2318ddf71"),
                            Code = "VkfBnk",
                            Name = "Vakıf Bank",
                            SortOrder = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("35af2ff3-8b97-43f3-8176-59982291b012"),
                            Code = "FnsBnk",
                            Name = "Finans Bank",
                            SortOrder = 2,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Proje.Model.Entities.PaymentStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("PaymentStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("922f400a-9743-4508-80cf-c6c3bbb385c0"),
                            Name = "Onay Bekliyor",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("06cbd5dc-b443-46c7-b984-1af819ac8453"),
                            Name = "Silindi",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("294543a1-b385-4768-beda-cabcd5862364"),
                            Name = "Onaylandı",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("5ade7dba-64ea-4de5-b624-3d599c29c066"),
                            Name = "İptal Edildi",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("138679af-6368-4097-94a7-6c944f79cc24"),
                            Name = "İade Edildi",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("c5273b25-59ea-4964-a4ed-099aef91a706"),
                            Name = "Hatalı Ödeme",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Proje.Model.Entities.PaymentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("PaymentType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d051727-896b-4c86-bfb5-980af28cdbc4"),
                            Name = "Kredi Kartı",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("43d849a2-feba-4a79-aa14-6adcfdb19916"),
                            Name = "Hediye Çeki",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Proje.Model.Entities.PhoneNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumberType")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("Proje.Model.Entities.PhoneNumberType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PhoneNumberTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4726a3aa-3a0c-4ff3-b684-9b2c6766329e"),
                            Name = "Ev Telefonu",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("fb820515-4fe0-45fb-8f52-501478dde166"),
                            Name = "İş Telefonu",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("73738da4-b457-48cb-b35d-3f2f469614e4"),
                            Name = "Cep Telefonu",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("58fad403-9c67-481b-a722-8ba260391e52"),
                            Name = "Fax",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("69649c24-512c-463b-add1-25ec970d3d9e"),
                            Name = "Diğer",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Proje.Model.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("BuyingPrice")
                        .HasColumnType("numeric");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Distributor")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Gift")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price1")
                        .HasColumnType("numeric");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ShortDetails")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("StockAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("VolumetricWeight")
                        .HasColumnType("numeric");

                    b.Property<int>("Warranty")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1acb9af2-4983-45c8-9081-f6233a77f111"),
                            BrandId = new Guid("1d67d426-77d0-4359-9c8b-804c0d7890ff"),
                            BuyingPrice = 100m,
                            CategoryId = new Guid("220e9662-88cc-4b24-8c40-80d423553615"),
                            Price1 = 200m,
                            ProductName = "Siyah Kazak",
                            ShortDetails = "SİYAH KIŞLIK KAZAK",
                            Status = 1,
                            StockAmount = 100m,
                            VolumetricWeight = 1.2m,
                            Warranty = 1
                        },
                        new
                        {
                            Id = new Guid("2acb9af2-4983-45c8-9081-f6233a77f222"),
                            BrandId = new Guid("1d67d426-77d0-4359-9c8b-804c0d7890ff"),
                            BuyingPrice = 100m,
                            CategoryId = new Guid("220e9662-88cc-4b24-8c40-80d423553615"),
                            Price1 = 200m,
                            ProductName = "Beyaz Kazak",
                            ShortDetails = "BEYAZ KIŞLIK KAZAK",
                            Status = 1,
                            StockAmount = 100m,
                            VolumetricWeight = 1.3m,
                            Warranty = 1
                        },
                        new
                        {
                            Id = new Guid("3acb9af2-4983-45c8-9081-f6233a77f333"),
                            BrandId = new Guid("1d67d426-77d0-4359-9c8b-804c0d7890ff"),
                            BuyingPrice = 100m,
                            CategoryId = new Guid("220e9662-88cc-4b24-8c40-80d423553615"),
                            Price1 = 200m,
                            ProductName = "Kırmızı Kazak",
                            ShortDetails = "KIRMIZI KIŞLIK KAZAK",
                            Status = 1,
                            StockAmount = 100m,
                            VolumetricWeight = 1.3m,
                            Warranty = 1
                        },
                        new
                        {
                            Id = new Guid("4acb9af2-4983-45c8-9081-f6233a77f444"),
                            BrandId = new Guid("70291557-c137-4c6f-bd73-874ccc8d2994"),
                            BuyingPrice = 99m,
                            CategoryId = new Guid("74368c62-c748-483e-8b38-9a4302d32922"),
                            Price1 = 200m,
                            ProductName = "Kot Pantolon",
                            ShortDetails = "KOT PANTOLON",
                            Status = 1,
                            StockAmount = 100m,
                            VolumetricWeight = 1.2m,
                            Warranty = 1
                        },
                        new
                        {
                            Id = new Guid("5acb9af2-4983-45c8-9081-f6233a77f555"),
                            BrandId = new Guid("3acb9af2-4983-45c8-9081-f6233a77f537"),
                            BuyingPrice = 199m,
                            CategoryId = new Guid("74368c62-c748-483e-8b38-9a4302d32922"),
                            Price1 = 300m,
                            ProductName = "Kumaş Pantolon",
                            ShortDetails = "KUMAŞ PANTOLON",
                            Status = 1,
                            StockAmount = 100m,
                            VolumetricWeight = 1m,
                            Warranty = 1
                        },
                        new
                        {
                            Id = new Guid("6acb9af2-4983-45c8-9081-f6233a77f666"),
                            BrandId = new Guid("5819fd74-7ad3-4ac0-89e1-48f7a06e87e5"),
                            BuyingPrice = 89m,
                            CategoryId = new Guid("ff670e2d-c83c-4def-b5b7-35595a3c26cc"),
                            Price1 = 200m,
                            ProductName = "Beyaz Gömlek",
                            ShortDetails = "BEYAZ KLASİK GÖMLEK",
                            Status = 1,
                            StockAmount = 100m,
                            VolumetricWeight = 1m,
                            Warranty = 1
                        },
                        new
                        {
                            Id = new Guid("7acb9af2-4983-45c8-9081-f6233a77f777"),
                            BrandId = new Guid("5819fd74-7ad3-4ac0-89e1-48f7a06e87e5"),
                            BuyingPrice = 89m,
                            CategoryId = new Guid("ff670e2d-c83c-4def-b5b7-35595a3c26cc"),
                            Price1 = 200m,
                            ProductName = "Siyah Gömlek",
                            ShortDetails = "BEYAZ KLASİK GÖMLEK",
                            Status = 1,
                            StockAmount = 100m,
                            VolumetricWeight = 1m,
                            Warranty = 1
                        },
                        new
                        {
                            Id = new Guid("8acb9af2-4983-45c8-9081-f6233a77f888"),
                            BrandId = new Guid("5819fd74-7ad3-4ac0-89e1-48f7a06e87e5"),
                            BuyingPrice = 89m,
                            CategoryId = new Guid("ff670e2d-c83c-4def-b5b7-35595a3c26cc"),
                            Price1 = 200m,
                            ProductName = "Mavi Gömlek",
                            ShortDetails = "MAVİ KLASİK GÖMLEK",
                            Status = 1,
                            StockAmount = 100m,
                            VolumetricWeight = 1m,
                            Warranty = 1
                        },
                        new
                        {
                            Id = new Guid("c98b184b-0fa0-4633-bb5f-cfbcc7b0e45b"),
                            BrandId = new Guid("5819fd74-7ad3-4ac0-89e1-48f7a06e87e5"),
                            BuyingPrice = 124m,
                            CategoryId = new Guid("ff670e2d-c83c-4def-b5b7-35595a3c26cc"),
                            Price1 = 250m,
                            ProductName = "Kırmızı Gömlek",
                            ShortDetails = "MAVİ KLASİK GÖMLEK",
                            Status = 1,
                            StockAmount = 100m,
                            VolumetricWeight = 1m,
                            Warranty = 1
                        });
                });

            modelBuilder.Entity("Proje.Model.Entities.ProductComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("character varying(65535)")
                        .HasMaxLength(65535);

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductComment");
                });

            modelBuilder.Entity("Proje.Model.Entities.ProductDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("character varying(65535)")
                        .HasMaxLength(65535);

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDetail");
                });

            modelBuilder.Entity("Proje.Model.Entities.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("Revision")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e99496e-665f-49eb-b9f5-daf9efdabd94"),
                            FileName = "/blog/images/product_images/Siyah_Kazak/1_org.jpg",
                            ProductId = new Guid("1acb9af2-4983-45c8-9081-f6233a77f111"),
                            Revision = "Siyah Kazak_1",
                            SortOrder = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("86e49ba0-0d47-4bb4-85e5-014e5241e3e7"),
                            FileName = "/blog/images/product_images/Siyah_Kazak/2_org_zoom.jpg",
                            ProductId = new Guid("1acb9af2-4983-45c8-9081-f6233a77f111"),
                            Revision = "Siyah Kazak_2",
                            SortOrder = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("3c405fb8-3355-4934-a1b5-8f0f9dbc2b4c"),
                            FileName = "/blog/images/product_images/Siyah_Kazak/4_org_zoom.jpg",
                            ProductId = new Guid("1acb9af2-4983-45c8-9081-f6233a77f111"),
                            Revision = "Siyah Kazak_3",
                            SortOrder = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("cfb5b2a1-38e9-4e35-ba30-1af9e5b7def5"),
                            FileName = "/blog/images/product_images/Siyah_Kazak/5_org_zoom.jpg",
                            ProductId = new Guid("1acb9af2-4983-45c8-9081-f6233a77f111"),
                            Revision = "Siyah Kazak_4",
                            SortOrder = 4,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("8195165c-5afa-4165-ac79-6151acbf771e"),
                            FileName = "/blog/images/product_images/Beyaz_Kazak/1_org_zoom.jpg",
                            ProductId = new Guid("2acb9af2-4983-45c8-9081-f6233a77f222"),
                            Revision = "Beyaz Kazak_1",
                            SortOrder = 5,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("466327bb-b102-4293-9435-02bb8d7a7d4e"),
                            FileName = "/blog/images/product_images/Beyaz_Kazak/2_org_zoom.jpg",
                            ProductId = new Guid("2acb9af2-4983-45c8-9081-f6233a77f222"),
                            Revision = "Beyaz Kazak_2",
                            SortOrder = 6,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("7d081144-3b3b-4dcc-b842-48ccf13f8cd3"),
                            FileName = "/blog/images/product_images/Beyaz_Kazak/5_org_zoom.jpg",
                            ProductId = new Guid("2acb9af2-4983-45c8-9081-f6233a77f222"),
                            Revision = "Beyaz Kazak_3",
                            SortOrder = 7,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("e5552ff1-0932-4d95-9e90-827d9f388c89"),
                            FileName = "/blog/images/product_images/Beyaz_Kazak/6_org_zoom.jpg",
                            ProductId = new Guid("2acb9af2-4983-45c8-9081-f6233a77f222"),
                            Revision = "Beyaz Kazak_4",
                            SortOrder = 8,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("94cd44dc-c981-4688-8e0b-f65e5ba461e6"),
                            FileName = "/blog/images/product_images/Kirmizi_Kazak/1_org_zoom (1).jpg",
                            ProductId = new Guid("3acb9af2-4983-45c8-9081-f6233a77f333"),
                            Revision = "Kırmızı Kazak_1",
                            SortOrder = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("dbccc3ef-931c-45fe-ae32-013ccfab10ca"),
                            FileName = "/blog/images/product_images/Kirmizi_Kazak/2_org_zoom.jpg",
                            ProductId = new Guid("3acb9af2-4983-45c8-9081-f6233a77f333"),
                            Revision = "Kırmızı Kazak_2",
                            SortOrder = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("d44bdbfb-e792-46b1-b810-740d012ca9d8"),
                            FileName = "/blog/images/product_images/Kirmizi_Kazak/5_org_zoom.jpg",
                            ProductId = new Guid("3acb9af2-4983-45c8-9081-f6233a77f333"),
                            Revision = "Kırmızı Kazak_3",
                            SortOrder = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("ca950a33-efcd-422f-b32c-27620b69945d"),
                            FileName = "/blog/images/product_images/Kot_Pantolon/0_org_zoom.jpg",
                            ProductId = new Guid("4acb9af2-4983-45c8-9081-f6233a77f444"),
                            Revision = "Kot_Pantolon_1",
                            SortOrder = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("f88af012-589f-4fbe-9b32-04da771c58ad"),
                            FileName = "/blog/images/product_images/Kot_Pantolon/1_org_zoom.jpg",
                            ProductId = new Guid("4acb9af2-4983-45c8-9081-f6233a77f444"),
                            Revision = "Kot_Pantolon_2",
                            SortOrder = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("2fc7f2f0-401f-427d-b09e-4fa9e5f83bc8"),
                            FileName = "/blog/images/product_images/Kot_Pantolon/4_org_zoom.jpg",
                            ProductId = new Guid("4acb9af2-4983-45c8-9081-f6233a77f444"),
                            Revision = "Kot_Pantolon_3",
                            SortOrder = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("39db4cc0-2c68-4e83-a691-3d8458c11437"),
                            FileName = "/blog/images/product_images/Kumas_Pantolon/1_org_zoom (1).jpg",
                            ProductId = new Guid("5acb9af2-4983-45c8-9081-f6233a77f555"),
                            Revision = "Kumas_Pantolon_1",
                            SortOrder = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("c9e17b8c-dd1e-427f-a977-248e15aea3fd"),
                            FileName = "/blog/images/product_images/Kumas_Pantolon/2_org_zoom.jpg",
                            ProductId = new Guid("5acb9af2-4983-45c8-9081-f6233a77f555"),
                            Revision = "Kumas_Pantolon_2",
                            SortOrder = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("bde1098d-04b6-44d8-9bf8-660bb95735f4"),
                            FileName = "/blog/images/product_images/Kumas_Pantolon/3_org_zoom.jpg",
                            ProductId = new Guid("5acb9af2-4983-45c8-9081-f6233a77f555"),
                            Revision = "Kumas_Pantolon_3",
                            SortOrder = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("660eedd2-f0a1-429c-8ec9-beaa3964a183"),
                            FileName = "/blog/images/product_images/Beyaz_Gomlek/1_org_zoom.jpg",
                            ProductId = new Guid("6acb9af2-4983-45c8-9081-f6233a77f666"),
                            Revision = "Beyaz_Gömlek_1",
                            SortOrder = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("960f4a34-422a-4846-9c83-882e9ec2dd0d"),
                            FileName = "/blog/images/product_images/Beyaz_Gomlek/3_org_zoom.jpg",
                            ProductId = new Guid("6acb9af2-4983-45c8-9081-f6233a77f666"),
                            Revision = "Beyaz_Gömlek_2",
                            SortOrder = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("638dae02-6d9d-4a46-838a-7e3e5f790f1e"),
                            FileName = "/blog/images/product_images/Beyaz_Gomlek/5_org_zoom.jpg",
                            ProductId = new Guid("6acb9af2-4983-45c8-9081-f6233a77f666"),
                            Revision = "Beyaz_Gömlek_3",
                            SortOrder = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("43237839-639b-46f3-a314-f702a602c40d"),
                            FileName = "/blog/images/product_images/Siyah_Gomlek/2_org_zoom.jpg",
                            ProductId = new Guid("7acb9af2-4983-45c8-9081-f6233a77f777"),
                            Revision = "Siyah_Gömlek_1",
                            SortOrder = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("98c93c9f-90bd-4867-ab12-2965df684aed"),
                            FileName = "/blog/images/product_images/Siyah_Gomlek/90_org_zoom.jpg",
                            ProductId = new Guid("7acb9af2-4983-45c8-9081-f6233a77f777"),
                            Revision = "Siyah_Gömlek_2",
                            SortOrder = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("969278ca-46ba-48d1-a0c3-f9a253a1e5ff"),
                            FileName = "/blog/images/product_images/Siyah_Gomlek/94_org_zoom.jpg",
                            ProductId = new Guid("7acb9af2-4983-45c8-9081-f6233a77f777"),
                            Revision = "Siyah_Gömlek_3",
                            SortOrder = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("1fc89776-7537-4348-9aff-cbdc5776f002"),
                            FileName = "/blog/images/product_images/Mavi_Gomlek/1_org_zoom.jpg",
                            ProductId = new Guid("8acb9af2-4983-45c8-9081-f6233a77f888"),
                            Revision = "Mavi_Gömlek_1",
                            SortOrder = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("b9eaf18a-e280-4d84-92de-0e99bee8ac89"),
                            FileName = "/blog/images/product_images/Mavi_Gomlek/2_org_zoom.jpg",
                            ProductId = new Guid("8acb9af2-4983-45c8-9081-f6233a77f888"),
                            Revision = "Mavi_Gömlek_2",
                            SortOrder = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("d9daea35-f288-425a-8d75-a1d14f2a510b"),
                            FileName = "/blog/images/product_images/Mavi_Gomlek/3_org_zoom.jpg",
                            ProductId = new Guid("8acb9af2-4983-45c8-9081-f6233a77f888"),
                            Revision = "Mavi_Gömlek_3",
                            SortOrder = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("5c7e932b-358b-493b-9545-534bd8a86270"),
                            FileName = "/blog/images/product_images/Kirmizi_Gomlek/1_org_zoom (1).jpg",
                            ProductId = new Guid("c98b184b-0fa0-4633-bb5f-cfbcc7b0e45b"),
                            Revision = "Kırmızı_Gömlek_1",
                            SortOrder = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("ca83f04e-45fb-4c5b-8fb7-f56fde1f58d0"),
                            FileName = "/blog/images/product_images/Kirmizi_Gomlek/1_org_zoom.jpg",
                            ProductId = new Guid("c98b184b-0fa0-4633-bb5f-cfbcc7b0e45b"),
                            Revision = "Kırmızı_Gömlek_2",
                            SortOrder = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("e8885fb6-9e94-4ed9-a73b-eb1581970d53"),
                            FileName = "/blog/images/product_images/Kirmizi_Gomlek/3_org_zoom.jpg",
                            ProductId = new Guid("c98b184b-0fa0-4633-bb5f-cfbcc7b0e45b"),
                            Revision = "Kırmızı_Gömlek_3",
                            SortOrder = 3,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Proje.Model.Entities.ShippingCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ExtraPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ExtraVolumetricWeightPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("FreeShipmentOrderPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("ShippingCompanys");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db5fb4ab-653a-4d26-8346-b067b6ef5d44"),
                            ExtraPrice = 10m,
                            ExtraVolumetricWeightPrice = 1m,
                            FreeShipmentOrderPrice = 100m,
                            Name = "Aras Kargo",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("ed1f9d0a-87f4-4634-a9a6-40120a277bbf"),
                            ExtraPrice = 11m,
                            ExtraVolumetricWeightPrice = 1m,
                            FreeShipmentOrderPrice = 100m,
                            Name = "PTT",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Proje.Model.Entities.SpecGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("ShortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SpecGroupName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("SpecGroup");
                });

            modelBuilder.Entity("Proje.Model.Entities.SpecName", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ShortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<Guid>("SpecGroupId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("SpecGroupId");

                    b.ToTable("SpecName");
                });

            modelBuilder.Entity("Proje.Model.Entities.SpecToProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecNameId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecValueId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SpecGroupId");

                    b.HasIndex("SpecNameId");

                    b.HasIndex("SpecValueId");

                    b.ToTable("SpecToProduct");
                });

            modelBuilder.Entity("Proje.Model.Entities.SpecValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Slug")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("SpecGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecNameId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("SpecGroupId");

                    b.HasIndex("SpecNameId");

                    b.ToTable("SpecValue");
                });

            modelBuilder.Entity("Proje.Model.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("LastIPAdress")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ModifiedComputer")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9c0622f8-8a2a-4f16-8270-985e4fbf5762"),
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            ImageUrl = "/",
                            LastIPAdress = "127.0.0.1",
                            LastLogin = new DateTime(2022, 4, 24, 17, 16, 40, 149, DateTimeKind.Local).AddTicks(8768),
                            LastName = "ADMIN",
                            Password = "123",
                            Status = 1,
                            Title = "Admin"
                        },
                        new
                        {
                            Id = new Guid("cde63b92-aa7a-4c6e-949b-f8c4ab17f203"),
                            Email = "ozgur@ozgur.com",
                            FirstName = "Ozgur",
                            ImageUrl = "/",
                            LastIPAdress = "127.0.0.1",
                            LastLogin = new DateTime(2022, 4, 24, 17, 16, 40, 151, DateTimeKind.Local).AddTicks(4207),
                            LastName = "EVREN",
                            Password = "123",
                            Status = 1,
                            Title = "Normal"
                        });
                });

            modelBuilder.Entity("Proje.Model.Entities.AddressType", b =>
                {
                    b.HasOne("Proje.Model.Entities.User", "CreatedUserAddressType")
                        .WithMany("CreatedUserAddressTypes")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Proje.Model.Entities.User", "ModifiedUserAddressType")
                        .WithMany("ModifiedUserAddressTypes")
                        .HasForeignKey("ModifiedUserId");
                });

            modelBuilder.Entity("Proje.Model.Entities.BrandToCategory", b =>
                {
                    b.HasOne("Proje.Model.Entities.Brand", "Brand")
                        .WithMany("BrandToCategories")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proje.Model.Entities.Category", "Category")
                        .WithMany("BrandToCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proje.Model.Entities.User", "CreatedUserBrandToCategory")
                        .WithMany("CreatedBrandToCategories")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Proje.Model.Entities.User", "ModifiedUserBrandToCategory")
                        .WithMany("ModifiedBrandToCategories")
                        .HasForeignKey("ModifiedUserId");
                });

            modelBuilder.Entity("Proje.Model.Entities.Cart", b =>
                {
                    b.HasOne("Proje.Model.Entities.User", "CreatedUserCart")
                        .WithMany("CreatedUserCarts")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Proje.Model.Entities.User", "ModifiedUserCart")
                        .WithMany("ModifiedUserCarts")
                        .HasForeignKey("ModifiedUserId");
                });

            modelBuilder.Entity("Proje.Model.Entities.CartItem", b =>
                {
                    b.HasOne("Proje.Model.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proje.Model.Entities.User", "CreatedUserCartItem")
                        .WithMany("CreatedUserCartItems")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Proje.Model.Entities.User", "ModifiedUserCartItem")
                        .WithMany("ModifiedUserCartItems")
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Proje.Model.Entities.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Proje.Model.Entities.CurrencyValue", b =>
                {
                    b.HasOne("Proje.Model.Entities.User", "CreatedUserCurrencyValue")
                        .WithMany("CreatedUserCurrencyValues")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Proje.Model.Entities.User", "ModifiedUserCurrencyValue")
                        .WithMany("ModifiedUserCurrencyValues")
                        .HasForeignKey("ModifiedUserId");
                });

            modelBuilder.Entity("Proje.Model.Entities.DistributorToProduct", b =>
                {
                    b.HasOne("Proje.Model.Entities.Distributor", "Distributor")
                        .WithMany("DistributorToProducts")
                        .HasForeignKey("DistributorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proje.Model.Entities.Product", "Product")
                        .WithMany("DistributorToProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Proje.Model.Entities.FavouritedProduct", b =>
                {
                    b.HasOne("Proje.Model.Entities.User", "CreatedUserFavouritedProduct")
                        .WithMany("CreatedUserFavouritedProducts")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Proje.Model.Entities.User", "ModifiedUserFavouritedProduct")
                        .WithMany("ModifiedUserFavouritedProducts")
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Proje.Model.Entities.Product", "Product")
                        .WithMany("FavouritedProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Proje.Model.Entities.InstallmentRate", b =>
                {
                    b.HasOne("Proje.Model.Entities.PaymentGateway", "PaymentGateway")
                        .WithMany("InstallmentRates")
                        .HasForeignKey("PaymentGatewayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Proje.Model.Entities.MemberAddress", b =>
                {
                    b.HasOne("Proje.Model.Entities.User", "CreatedUserMemberAddress")
                        .WithMany("CreatedUserMemberAddresses")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Proje.Model.Entities.User", "ModifiedUserMemberAddress")
                        .WithMany("ModifiedUserMemberAddresses")
                        .HasForeignKey("ModifiedUserId");
                });

            modelBuilder.Entity("Proje.Model.Entities.OptionGroup", b =>
                {
                    b.HasOne("Proje.Model.Entities.User", "CreatedUserOptionGroup")
                        .WithMany("CreatedUserOptionGroups")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Proje.Model.Entities.User", "ModifiedUserOptionGroup")
                        .WithMany("ModifiedUserOptionGroups")
                        .HasForeignKey("ModifiedUserId");
                });

            modelBuilder.Entity("Proje.Model.Entities.OptionToProduct", b =>
                {
                    b.HasOne("Proje.Model.Entities.User", "CreatedUserOptionToProduct")
                        .WithMany("CreatedUserOptionToProducts")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Proje.Model.Entities.User", "ModifiedUserOptionToProduct")
                        .WithMany("ModifiedUserOptionToProducts")
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Proje.Model.Entities.OptionGroup", "OptionGroup")
                        .WithMany("OptionToProducts")
                        .HasForeignKey("OptionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proje.Model.Entities.Options", "Option")
                        .WithMany("OptionToProducts")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proje.Model.Entities.Product", "Product")
                        .WithMany("OptionToProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Proje.Model.Entities.Options", b =>
                {
                    b.HasOne("Proje.Model.Entities.User", "CreatedUserOptions")
                        .WithMany("CreatedUserOptions")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Proje.Model.Entities.User", "ModifiedUserOptions")
                        .WithMany("ModifiedUserOptions")
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Proje.Model.Entities.OptionGroup", "OptionGroup")
                        .WithMany("Options")
                        .HasForeignKey("OptionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Proje.Model.Entities.Order", b =>
                {
                    b.HasOne("Proje.Model.Entities.MemberAddress", "BillingAddress")
                        .WithMany("BillingAddresses")
                        .HasForeignKey("BillingAddressId");

                    b.HasOne("Proje.Model.Entities.User", "CreatedUserOrder")
                        .WithMany("CreatedUserOrders")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Proje.Model.Entities.User", "ModifiedUserOrder")
                        .WithMany("ModifiedUserOrders")
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Proje.Model.Entities.MemberAddress", "ShippingAddress")
                        .WithMany("ShippingAddresses")
                        .HasForeignKey("ShippingAddressId");
                });

            modelBuilder.Entity("Proje.Model.Entities.OrderItem", b =>
                {
                    b.HasOne("Proje.Model.Entities.User", "CreatedUserOrderItem")
                        .WithMany("CreatedUserOrderItems")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Proje.Model.Entities.User", "ModifiedUserOrderItem")
                        .WithMany("ModifiedUserOrderItems")
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Proje.Model.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proje.Model.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proje.Model.Entities.User", "User")
                        .WithMany("OrderItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Proje.Model.Entities.OrderRefundDemand", b =>
                {
                    b.HasOne("Proje.Model.Entities.User", "CreatedUserOrderRefundDemand")
                        .WithMany("CreatedUserOrderRefundDemands")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Proje.Model.Entities.User", "ModifiedUserOrderRefundDemand")
                        .WithMany("ModifiedUserOrderRefundDemands")
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Proje.Model.Entities.Order", "Order")
                        .WithMany("OrderRefundDemands")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proje.Model.Entities.User", "User")
                        .WithMany("OrderRefundDemands")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Proje.Model.Entities.Payment", b =>
                {
                    b.HasOne("Proje.Model.Entities.User", "CreatedUserPayment")
                        .WithMany("CreatedUserPayments")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Proje.Model.Entities.User", "ModifiedUserPayment")
                        .WithMany("ModifiedUserPayments")
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Proje.Model.Entities.PaymentStatus", "PaymentStatus")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentStatusId");
                });

            modelBuilder.Entity("Proje.Model.Entities.PaymentGateway", b =>
                {
                    b.HasOne("Proje.Model.Entities.User", "CreatedUserPaymentGateway")
                        .WithMany("CreatedUserPaymentGateways")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Proje.Model.Entities.User", "ModifiedUserPaymentGateway")
                        .WithMany("ModifiedUserPaymentGateways")
                        .HasForeignKey("ModifiedUserId");
                });

            modelBuilder.Entity("Proje.Model.Entities.PaymentStatus", b =>
                {
                    b.HasOne("Proje.Model.Entities.User", "CreatedUserPaymentStatus")
                        .WithMany("CreatedUserPaymentStatuses")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Proje.Model.Entities.User", "ModifiedUserPaymentStatus")
                        .WithMany("ModifiedUserPaymentStatuses")
                        .HasForeignKey("ModifiedUserId");
                });

            modelBuilder.Entity("Proje.Model.Entities.PaymentType", b =>
                {
                    b.HasOne("Proje.Model.Entities.User", "CreatedUserPaymentType")
                        .WithMany("CreatedUserPaymentTypes")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Proje.Model.Entities.User", "ModifiedUserPaymentType")
                        .WithMany("ModifiedUserPaymentTypes")
                        .HasForeignKey("ModifiedUserId");
                });

            modelBuilder.Entity("Proje.Model.Entities.PhoneNumber", b =>
                {
                    b.HasOne("Proje.Model.Entities.User", "CreatedUserPhoneNumber")
                        .WithMany("CreatedUserPhoneNumbers")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Proje.Model.Entities.User", "ModifiedUserPhoneNumber")
                        .WithMany("ModifiedUserPhoneNumbers")
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Proje.Model.Entities.User", "User")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Proje.Model.Entities.Product", b =>
                {
                    b.HasOne("Proje.Model.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proje.Model.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Proje.Model.Entities.ProductComment", b =>
                {
                    b.HasOne("Proje.Model.Entities.User", "CreatedUserProductComment")
                        .WithMany("CreatedUserProductComments")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Proje.Model.Entities.User", "ModifiedUserProductComment")
                        .WithMany("ModifiedUserProductComments")
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Proje.Model.Entities.Product", "Product")
                        .WithMany("ProductComments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proje.Model.Entities.User", "User")
                        .WithMany("ProductComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Proje.Model.Entities.ProductDetail", b =>
                {
                    b.HasOne("Proje.Model.Entities.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Proje.Model.Entities.ProductImage", b =>
                {
                    b.HasOne("Proje.Model.Entities.User", "CreatedUserProductImage")
                        .WithMany("CreatedUserProductImages")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Proje.Model.Entities.User", "ModifiedUserProductImage")
                        .WithMany("ModifiedUserProductImages")
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Proje.Model.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Proje.Model.Entities.ShippingCompany", b =>
                {
                    b.HasOne("Proje.Model.Entities.User", "CreatedUserShippingCompany")
                        .WithMany("CreatedUserShippingCompanys")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Proje.Model.Entities.User", "ModifiedUserShippingCompany")
                        .WithMany("ModifiedUserShippingCompanys")
                        .HasForeignKey("ModifiedUserId");
                });

            modelBuilder.Entity("Proje.Model.Entities.SpecGroup", b =>
                {
                    b.HasOne("Proje.Model.Entities.User", "CreatedUserSpecGroup")
                        .WithMany("CreatedUserSpecGroups")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Proje.Model.Entities.User", "ModifiedUserSpecGroup")
                        .WithMany("ModifiedUserSpecGroups")
                        .HasForeignKey("ModifiedUserId");
                });

            modelBuilder.Entity("Proje.Model.Entities.SpecName", b =>
                {
                    b.HasOne("Proje.Model.Entities.User", "CreatedUserSpecName")
                        .WithMany("CreatedUserSpecNames")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Proje.Model.Entities.User", "ModifiedUserSpecName")
                        .WithMany("ModifiedUserSpecNames")
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Proje.Model.Entities.SpecGroup", "SpecGroup")
                        .WithMany("SpecNames")
                        .HasForeignKey("SpecGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Proje.Model.Entities.SpecToProduct", b =>
                {
                    b.HasOne("Proje.Model.Entities.User", "CreatedUserSpecToProduct")
                        .WithMany("CreatedUserSpecToProducts")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Proje.Model.Entities.User", "ModifiedUserSpecToProduct")
                        .WithMany("ModifiedUserSpecToProducts")
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Proje.Model.Entities.Product", "Product")
                        .WithMany("SpecToProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proje.Model.Entities.SpecGroup", "SpecGroup")
                        .WithMany("SpecToProducts")
                        .HasForeignKey("SpecGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proje.Model.Entities.SpecName", "SpecName")
                        .WithMany("SpecToProducts")
                        .HasForeignKey("SpecNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proje.Model.Entities.SpecValue", "SpecValue")
                        .WithMany("SpecToProducts")
                        .HasForeignKey("SpecValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Proje.Model.Entities.SpecValue", b =>
                {
                    b.HasOne("Proje.Model.Entities.User", "CreatedUserSpecValue")
                        .WithMany("CreatedUserSpecValues")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Proje.Model.Entities.User", "ModifiedUserSpecValue")
                        .WithMany("ModifiedUserSpecValues")
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Proje.Model.Entities.SpecGroup", "SpecGroup")
                        .WithMany("SpecValues")
                        .HasForeignKey("SpecGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proje.Model.Entities.SpecName", "SpecName")
                        .WithMany("SpecValues")
                        .HasForeignKey("SpecNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Proje.Model.Entities.User", b =>
                {
                    b.HasOne("Proje.Model.Entities.User", "CreatedUser")
                        .WithMany("CreatedUsers")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Proje.Model.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedUsers")
                        .HasForeignKey("ModifiedUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
